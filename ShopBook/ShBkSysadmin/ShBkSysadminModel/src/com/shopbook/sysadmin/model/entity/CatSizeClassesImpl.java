package com.shopbook.sysadmin.model.entity;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jul 06 19:31:32 EET 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CatSizeClassesImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CatSzClassCode,
        CatCode,
        SzClassCode,
        Notes,
        Categories,
        SizeClasses;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CATSZCLASSCODE = AttributesEnum.CatSzClassCode.index();
    public static final int CATCODE = AttributesEnum.CatCode.index();
    public static final int SZCLASSCODE = AttributesEnum.SzClassCode.index();
    public static final int NOTES = AttributesEnum.Notes.index();
    public static final int CATEGORIES = AttributesEnum.Categories.index();
    public static final int SIZECLASSES = AttributesEnum.SizeClasses.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CatSizeClassesImpl() {
    }

    /**
     * Gets the attribute value for CatSzClassCode, using the alias name CatSzClassCode.
     * @return the value of CatSzClassCode
     */
    public String getCatSzClassCode() {
        return (String) getAttributeInternal(CATSZCLASSCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CatSzClassCode.
     * @param value value to set the CatSzClassCode
     */
    public void setCatSzClassCode(String value) {
        String cC = getCatCode();
        cC = cC.concat(getSzClassCode());
        setAttributeInternal(CATSZCLASSCODE, cC);
    }

    /**
     * Gets the attribute value for CatCode, using the alias name CatCode.
     * @return the value of CatCode
     */
    public String getCatCode() {
        return (String) getAttributeInternal(CATCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CatCode.
     * @param value value to set the CatCode
     */
    public void setCatCode(String value) {
        setAttributeInternal(CATCODE, value);
    }

    /**
     * Gets the attribute value for SzClassCode, using the alias name SzClassCode.
     * @return the value of SzClassCode
     */
    public String getSzClassCode() {
        return (String) getAttributeInternal(SZCLASSCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SzClassCode.
     * @param value value to set the SzClassCode
     */
    public void setSzClassCode(String value) {
        setAttributeInternal(SZCLASSCODE, value);
    }

    /**
     * Gets the attribute value for Notes, using the alias name Notes.
     * @return the value of Notes
     */
    public String getNotes() {
        return (String) getAttributeInternal(NOTES);
    }

    /**
     * Sets <code>value</code> as the attribute value for Notes.
     * @param value value to set the Notes
     */
    public void setNotes(String value) {
        setAttributeInternal(NOTES, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getCategories() {
        return (EntityImpl) getAttributeInternal(CATEGORIES);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCategories(EntityImpl value) {
        setAttributeInternal(CATEGORIES, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getSizeClasses() {
        return (EntityImpl) getAttributeInternal(SIZECLASSES);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setSizeClasses(EntityImpl value) {
        setAttributeInternal(SIZECLASSES, value);
    }

    /**
     * @param catSzClassCode key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String catSzClassCode) {
        return new Key(new Object[] { catSzClassCode });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.shopbook.sysadmin.model.entity.CatSizeClasses");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT || operation == DML_UPDATE) {
            setCatSzClassCode("000000");
            super.doDML(operation, e); }
        else if (operation == DML_DELETE) {
            super.doDML(operation, e);
        }
    }
}

